<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mz026&#39;s blog</title>
  <subtitle>Happiness is real only when shared.</subtitle>
  <link href="/atom.xml" rel="self"/>

  <link href="http://yoursite.com/"/>
  <updated>2016-07-30T16:38:47.398Z</updated>
  <id>http://yoursite.com/</id>

  <author>
    <name>mz026</name>

  </author>

  <generator uri="http://hexo.io/">Hexo</generator>

  <entry>
    <title>Redux API Middleman</title>
    <link href="http://yoursite.com/20160731/redux-api-middleman/"/>
    <id>http://yoursite.com/20160731/redux-api-middleman/</id>
    <published>2016-07-30T16:38:47.406Z</published>
    <updated>2016-07-30T16:38:47.398Z</updated>

    <content type="html"><![CDATA[<p>最近和同事們一起合作，做出了一個把 “送 API request” 這件事情抽象出來的 redux middleware: <a href="https://github.com/CodementorIO/redux-api-middleman" target="_blank" rel="external">redux-api-middleman</a></p>
<p>這個東西本來是在 <a href="https://github.com/mz026/universal-redux-template" target="_blank" rel="external">redux-universal-template</a> 裡面的一個 middleware，但隨著功能越加越多，再者有別的 project 也要用到一樣的東西，所以索性把它抽出來變成一個獨立的 <a href="https://logdown.com/account/posts/775171-redux-api-middleman/edit" target="_blank" rel="external">npm package</a></p>
<a id="more"></a>
<h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><p>為什麼要把”送 API request” 這件事情特別拿出來討論呢？主要是因為送 API 這件事情是在一般的 web app 裡面很常見的非同步(asynchronous) 的行為。而 asynchronous 的行為本身實作起來就比較複雜一點，要寫相對應的測試更是複雜。如果可以有某種方式讓我們把件事情抽象出來讓它單純一點，那就太好惹！<br>Redux 在這方面提供了一個很好的切入點，讓我們可以把這當中需要的東西抽出來變成一個 middleware。</p>
<h1 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h1><p>如果要把 “送API request” 這件事情抽象出來的話，要把什麼東西抽出來呢？或更精確地說，我們希望抽出來之後，使用起來是什麼樣子呢？</p>
<h2 id="Asynchronous-to-Synchronous"><a href="#Asynchronous-to-Synchronous" class="headerlink" title="Asynchronous to Synchronous"></a>Asynchronous to Synchronous</h2><p>首先，我們希望送 API request 這件事情從一個 asynchronous 的行為變成一個 “貌似 synchronous” 的行為。之所以說 “貌似” synchronous 的原因是，送 API 這件事情本質上就是 async 的，但我們可以透過某種抽象的過程，讓它寫起來和測試起來的時候，像是在處理一個 synchronous 的東西一樣。</p>
<h2 id="支援-Universal-Rendering"><a href="#支援-Universal-Rendering" class="headerlink" title="支援 Universal Rendering"></a>支援 <a href="http://mz026.logdown.com/posts/308147-hello-redux-2-3-server-rendering" target="_blank" rel="external">Universal Rendering</a></h2><p>送 API 這件事情，其實和 React Universal Rendering 息息相關。為什麼呢？因為在做 universal rendering 的時候，web server 必須向 API server 拿要 render 的 data，而這部份的程式其實和前端是共用的。但當這件事情發生在 server 上的時候，我們會多出一個需求：就是在 server 上要知道什麼時候 data 才全部都拉下來了，這時候才可以把 React components render 出來送給前端。</p>
<h2 id="Side-Effect-Friendly"><a href="#Side-Effect-Friendly" class="headerlink" title="Side Effect Friendly"></a>Side Effect Friendly</h2><p>API request 常常伴隨著 application 的 side effect。好比說，在 login 的 request 成功之後，我們要把 store 裡面的 <code>currentUser.isLoggedIn</code> 更新成 <code>true</code> 之外，要把 user route 到另一個頁面。這時候 “route 到另一個頁面” 就稱之為這個 request 的 side effect。我們希望把 “送API request” 這件事抽象出來之後，可以讓我們有一個明確的地方來管理這類的 side effects。</p>
<h2 id="API-連發"><a href="#API-連發" class="headerlink" title="API 連發"></a>API 連發</h2><p>在某些時候，API 的設計並不一定會和前端的使用流程密切的貼合。也就是說，在這個時候我們在 web app 這端要呈現出一個畫面或者完成一個行為的時候，有可能要連續送出一個以上互相有關聯的 API call。例如說，第一個 API 可能是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">url: /me [GET]</div><div class="line">returns:</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 1,</div><div class="line">  &quot;blog_id&quot;: 1234</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而第二個 API 是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">url: /blogs/:blog_id [GET]</div><div class="line">returns:</div><div class="line"></div><div class="line">&#123;</div><div class="line">   blog details...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這時候如果真正改變我們 application state 的是第二個 request, 而要發出第二個 request 必須要等一個 request  回來之後才可以執行，這時候我們就會希望我們的抽象出來的東西可以讓我們輕鬆地做到這件事情。</p>
<h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><p>這個部份的功能就屬於在比較特殊的時機才會用到了。最近我們有一部份的 request authentication 從 session 轉換成用 <a href="https://jwt.io/" target="_blank" rel="external">JWT</a> <a href="https://en.wikipedia.org/wiki/Single_sign-on" target="_blank" rel="external">single sign on</a> 來做，大致上的出發點<strong>是希望每一個 server 要做 request authentication 的時候可以不用去問一個統一的 data store</strong> (像是 database 或 redis 等)。但同時我們又希望在必要的時候可以把一個 token   revoke 掉。於是在 client 這邊就必須要做到：</p>
<p><strong>如果一個 request 發出去，server 回傳 401 的話，這時候要先發一個 refresh token 的 request, 然後再把本來的那個 request 重發一次 (replay)。</strong></p>
<p>但在 client 這邊的實作上，同時又不希望這件有點複雜的事情讓整份 code 變得太過可怕。</p>
<h2 id="Parameter-Mutation"><a href="#Parameter-Mutation" class="headerlink" title="Parameter Mutation"></a>Parameter Mutation</h2><p>另外我們還想要達成的事情是 parameter mutation。意思是說，在每個 request 自動帶上某些參數，比如說：</p>
<ul>
<li>如果 store 裡面有 <code>currentUser.accessToken</code> 的話，就把它帶在 request 的 header 上面的 <code>x-access-token</code>這個 field</li>
<li>把每個 server 回來的 response 都 <a href="https://github.com/domchristie/humps#converting-object-keys" target="_blank" rel="external"><code>camelizeKeys</code></a></li>
</ul>
<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>綜合以上的各點需求，於是我們決定把這個東西用 redux middleware 的型式抽象出來。好吧，其實不是。最一開始其實我只是想做到 async to sync 和 universal rendering 而已，於是就把 <a href="https://github.com/reactjs/redux/blob/master/examples/real-world/middleware/api.js" target="_blank" rel="external">redux real word example 裡面的 api middleware </a>拿來改，想不到後來功能越加越多才變成現在這個樣子 XD</p>
<p>而在實作方面，有一些有趣的地方想跟大家介紹一下。</p>
<h2 id="Async-to-Sync"><a href="#Async-to-Sync" class="headerlink" title="Async to Sync"></a>Async to Sync</h2><p>這個部份是 <a href="https://github.com/CodementorIO/redux-api-middleman" target="_blank" rel="external">redux-api-middleman</a> 的最根本的部份。透過它，在 action creator 裡面要發一個 request 就會變成這樣：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; CALL_API &#125; <span class="keyword">from</span> <span class="string">'redux-api-middleware'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_MY_INFO_SUCCESS = <span class="built_in">Symbol</span>(<span class="string">'GET_MY_INFO_SUCCESS'</span>)</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getMyInfo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    [CALL_API]: &#123;</div><div class="line">      method: <span class="string">'get'</span>,</div><div class="line">      path: <span class="string">'/me'</span>,</div><div class="line">      successType: GET_MY_INFO_SUCCESS</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>這樣一來，發 request 給 server 這件事情在寫法上，就從本來的 async 的型式變成 return 一個帶有 <code>CALL_API</code> 這個 key 的 action。而真正發 request 出去的這件事情則在 middleware 裡面完成。</strong></p>
<p>這樣的做法可以同時讓實作和測試都變得相當單純。</p>
<h2 id="Universal-Rendering"><a href="#Universal-Rendering" class="headerlink" title="Universal Rendering"></a>Universal Rendering</h2><p>在做 universal rendering 的時候，要怎麼讓 server 這邊知道 request 都已經 ready 了可以準備 render component 了呢？<br>答案就是用 promise 來完成。大致上來說呢，<strong>就是讓 middleware return 一個 promise，這樣一來在 <code>store.dispatch</code> 的時候就會拿到這個 promise。如此一來就可以知道 API call 什麼時候完成了。</strong></p>
<h2 id="Side-Effect-Friendly-1"><a href="#Side-Effect-Friendly-1" class="headerlink" title="Side Effect Friendly"></a>Side Effect Friendly</h2><h2 id="API-連發-1"><a href="#API-連發-1" class="headerlink" title="API 連發"></a>API 連發</h2><p>連發API的作法，在 action creator 裡面會長成這樣：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; CALL_API, CHAIN_API &#125; <span class="keyword">from</span> <span class="string">'redux-api-middleman'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_BLOG_INFO_SUCCESS = <span class="built_in">Symbol</span>(<span class="string">'GET_BLOG_INFO_SUCCESS'</span>)</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogInfo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    [CHAIN_API]: [</div><div class="line">      () =&gt; &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          [CALL_API]: &#123;</div><div class="line">            method: <span class="string">'get'</span>,</div><div class="line">            path: <span class="string">'/me'</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      (meResponse) =&gt; &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          [CALL_API]: &#123;</div><div class="line">            method: <span class="string">'get'</span>,</div><div class="line">            path: <span class="string">`/blogs/<span class="subst">$&#123;meResponse.blogId&#125;</span>`</span></div><div class="line">            successType: GET_BLOG_INFO_SUCCESS</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大致上來說，就是把每一個 request 得到的 response body 傳到下一個，讓下一個 request 可以根據上一個 request 的結果去做事情。</p>
<p>連發 API 這件事情其實是發一個 API 的延伸。也就是說，<strong>我們可以把只發一個 request 的情形看成是連發的 special case</strong> (就是連發但只有一發這樣)。<br>所以實際上在實作的時候，如果接到 <code>CALL_API</code>(只發一個) 這種 type 的 action，其實會把它轉成 <code>CHAIN_API</code>(連發) 的 type 然後再 <code>dispatch</code> 一次。</p>
<p>而在 <a href="https://github.com/CodementorIO/redux-api-middleman/blob/master/src/index.js#L48-L52" target="_blank" rel="external">middleware 的實作</a>上，是把每個 <code>CALL_API</code> 的內容包裝成一個 promise, 然後再把這一連串的 promise reduce 起來，最後再 return 出去讓 universal rendering 使用。</p>
<h2 id="Replay-1"><a href="#Replay-1" class="headerlink" title="Replay"></a>Replay</h2><p>像上面所說的，我們想要可以在 request 失敗的時候，用 config 的方式介入一個 interceptor。<strong>在這個 interceptor 裡面，我們可以選擇要重發 request 或者不管它就讓它 pass 到 reducer 那邊去</strong>。以我們的例子來說是這樣的：</p>
<ul>
<li>如果 API call request 的 error code 是 401，這時候我們要另外發一個 refresh access token 的 request 給 server。在 refresh 成功之後，就重發一次本來的 API call request。</li>
<li>如果 API call request 的 error code 不是 401 的話，那我們就不要管它，就讓它 pass 到 reducer 那邊去。</li>
</ul>
<p>上面的情形我們用 config <code>errorInterceptor</code> 的方式來完成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> apiMiddleware <span class="keyword">from</span> <span class="string">'redux-api-middleman'</span></div><div class="line"></div><div class="line">apiMiddleware(&#123;</div><div class="line">  baseUrl: <span class="string">'https://api.myapp.com'</span>,</div><div class="line">  errorInterceptor: (&#123; err, proceedError, replay, getState &#125;)=&gt; &#123;</div><div class="line">    <span class="keyword">if</span>(err.status === <span class="number">401</span>) &#123;</div><div class="line">      refreshAccessToken()</div><div class="line">        .then(()=&gt; &#123; replay() &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      proceedError()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>這樣一來，我們就可以在其他的 action 不知道這件事情的狀況下，做到偷偷 refresh access token 的行為惹。</p>
<h2 id="Parameter-Mutation-1"><a href="#Parameter-Mutation-1" class="headerlink" title="Parameter Mutation"></a>Parameter Mutation</h2><p>在發 API request 的時候，有時候我們會想要在每一個 request 上面多帶一點東西，或者是把一些東西轉成另一個格式。<br>例如說：</p>
<ul>
<li>在每一個 request 裡面，把 access token 帶在 header 裡面</li>
<li>在每一個 request 裡面，把我們 application 送出去的 camel case 的 request body, query string 等轉換成 snake style</li>
<li>在每一個 response，把 server 回傳的 snake style 的 response 轉成 camel case</li>
</ul>
<p>像這些東西要每一個 request 都分開做就太痛苦惹。<br>在 <a href="https://github.com/CodementorIO/redux-api-middleman" target="_blank" rel="external">redux-api-middleman</a> 裡面，我們把這類的東西抽象出來並且分成兩類：</p>
<ul>
<li>全部 request 都要 apply 的，像是上面提到的 access token 的</li>
<li>依據每個 request 而改變的，像是 camel case / snake style 的轉換</li>
</ul>
<p>以全部 request 都要用到的東西來說，我們可以在建立 middleware 的時候，加入一個 <code>generateDefaultParams</code> 的 function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import apiMiddleware from &apos;redux-api-middleman&apos;</div><div class="line"></div><div class="line">apiMiddleware(&#123;</div><div class="line">  baseUrl: &apos;https://api.myapp.com&apos;,</div><div class="line">  generateDefaultParams: (&#123; getState &#125;)=&gt; &#123;</div><div class="line">    return &#123;</div><div class="line">      headers: &#123; &apos;X-Requested-From&apos;: &apos;my-killer-app&apos; &#125;,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  maxReplayTimes: 5</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>這個 function 最多可以回傳三個 keys，分別是：</p>
<ul>
<li><code>headers</code></li>
<li><code>query</code></li>
<li><code>body</code></li>
</ul>
<p>而在每一個 request 裡面，這三個回傳出來的 key 就會在每一個 API request 被當成 default 的參數被放進去了。</p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>發 API 這件事情是 web app 裡面最常做的事情之一，但它的 async 的特性也常常在實作或測試的時候令人頭大。<br>目前這樣的抽象方法在我們日常開發的production app 都還算OK。如果有任何想法都非常歡迎 <a href="https://github.com/CodementorIO/redux-api-middleman" target="_blank" rel="external">pull request</a> 阿！！</p>
]]></content>

    <summary type="html">

      &lt;p&gt;最近和同事們一起合作，做出了一個把 “送 API request” 這件事情抽象出來的 redux middleware: &lt;a href=&quot;https://github.com/CodementorIO/redux-api-middleman&quot;&gt;redux-api-middleman&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這個東西本來是在 &lt;a href=&quot;https://github.com/mz026/universal-redux-template&quot;&gt;redux-universal-template&lt;/a&gt; 裡面的一個 middleware，但隨著功能越加越多，再者有別的 project 也要用到一樣的東西，所以索性把它抽出來變成一個獨立的 &lt;a href=&quot;https://logdown.com/account/posts/775171-redux-api-middleman/edit&quot;&gt;npm package&lt;/a&gt;&lt;/p&gt;

    </summary>


      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>

      <category term="react" scheme="http://yoursite.com/tags/react/"/>

  </entry>

  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/20160729/hello-world/"/>
    <id>http://yoursite.com/20160729/hello-world/</id>
    <published>2016-07-29T04:44:20.324Z</published>
    <updated>2016-07-29T04:44:20.324Z</updated>

    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>

    <summary type="html">

      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.

    </summary>


  </entry>

</feed>
